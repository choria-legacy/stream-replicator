#!/bin/bash
#
# Init script for stream-replicator
#
### BEGIN INIT INFO
# Provides:          stream-replicator
# Required-Start:    $remote_fs $syslog
# Required-Stop:     $remote_fs $syslog
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: Choria NATS Streaming Topic Replicator
# Description:       Replicator for topics in the NATS Streaming Server
### END INIT INFO

# source function library
. /etc/rc.d/init.d/functions

prog="stream-replicator"
user="nobody"
group="nobody"
exec="/usr/sbin/stream-replicator"
piddir="/var/run/${prog}"
lockfile="/var/lock/subsys/${prog}"
logfile="/var/log/${prog}.log"
conffile="/etc/${prog}/sr.yaml"

TOPICS=""

# pull in sysconfig settings
[ -e /etc/sysconfig/${prog} ] && . /etc/sysconfig/${prog}

start() {
    [ -x ${exec} ] || exit 3
    [ -f ${conffile} ] || exit 3
    [ -d ${confdir} ] || exit 3
    [ ! -z "${TOPICS}" ] || exit 3

    umask 077

    if [ -f ${logfile} ]; then
        touch ${logfile}
        chown ${user}:${group} ${logfile}
    fi

    echo $"Starting ${prog}: "

    errors=0
    success=0

    for c in ${TOPICS}; do
        pidfile="${piddir}/${c}.pid"
        rm -f ${pidfile}

        daemon --pidfile=${pidfile} " { nohup ${exec} --config ${conffile} --topic ${c} --pid ${pidfile} > ${logfile} 2>&1 & } ; sleep 0.5 ; [ -f ${pidfile} ]"

        if [ $? = 0 ] && [ -f ${pidfile} ]; then
            echo "${c}"
            success=1
        else
            echo "${c}"
            errors=1
        fi
    done

    RETVAL=0

    if [ $errors = 1 ]; then
        RETVAL=3
    fi

    echo

    [ ${RETVAL} -eq 0 ] && touch ${lockfile}

    return ${RETVAL}
}

stop() {
    echo -n $"Shutting down ${prog}: "
    for pidf in `/bin/ls $piddir/*.pid 2>/dev/null`; do
        topic=`basename %{pidf} .pid`

    	if [ -s ${pidf} ]; then
            pid=`cat ${pidf}`
		    kill -TERM ${pid} >/dev/null 2>&1

            for i in 1 2 3 4 5 ; do
                status -p "${pidf}" ${exec} >/dev/null 2>&1 || break
                sleep 1
            done

            status -p "${pidf}" ${exec} >/dev/null 2>&1
            if [ $? = 0 ];then
                echo -n "Timeout reached. Killing ${topic} (pid ${pid}) with SIGKILL. "
                kill -KILL $pid >/dev/null 2>&1
            fi

        	rm -f ${pidf}
    	fi

        echo -n "${topic} "
    done

    echo
    rm -f ${lockfile}
}

restart() {
    stop
    start
}

force_reload() {
    restart
}

rh_status() {
    stopped=0
    running=0

    RETVAL=3

    for c in ${TOPICS}; do
    	pidf="${piddir}/${c}.pid"

        echo -n $"${c}: "

        status -p "${pidf}" -l ${lockfile} ${exec}
        if [ $? = 0 ]; then
          running=1
        else
          stopped=1
        fi
    done

    if [ $running = 1 ]; then
        RETVAL=0
    fi

    if [ $stopped = 1 ]; then
        RETVAL=3
    fi

    return ${RETVAL}
}

rh_status_q() {
    rh_status >/dev/null 2>&1
}

case "$1" in
    start)
        rh_status_q && exit 0
        $1
        ;;
    stop)
        $1
        ;;
    restart)
        $1
        ;;
    force-reload)
        force_reload
        ;;
    status)
        rh_status
        ;;
    condrestart|try-restart)
        rh_status_q || exit 0
        restart
        ;;
    *)
        echo $"Usage: $0 {start|stop|status|restart|condrestart|try-restart|force-reload}"
        exit 2
esac

exit $?
